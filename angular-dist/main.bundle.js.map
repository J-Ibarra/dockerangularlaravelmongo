{"version":3,"sources":["webpack:///./src/app/api.service.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACG;AAEb;AAG/B,IAAa,UAAU;IAEnB,oBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAC9B,CAAC;IAED,wBAAG,GAAH;QACI,IAAM,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;QAC9B,IAAM,EAAE,GAAG,WAAW,CAAC;QACvB,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aACvC,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAChC,CAAC;IAEL,iBAAC;AAAD,CAAC;AAdY,UAAU;IADtB,wFAAU,EAAE;yDAGiB,2DAAI,oBAAJ,2DAAI;GAFrB,UAAU,CActB;AAdsB;;;;;;;;;ACNvB;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;;;;;;;;ACN+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,4FAAc,EAAE,CAAC;AACnB,CAAC;AAED,wHAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;ACVJ;AACP;AA6BzC,IAAa,YAAY;IAMrB,sBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAWC;QAVG,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;QAE1B,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,SAAS,CAC3B,cAAI;YACA,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC,EACD,aAAG;YACC,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACnB,CAAC,CACJ,CAAC;IACN,CAAC;IAGL,mBAAC;AAAD,CAAC;AAxBY,YAAY;IA3BxB,wFAAS,CAAC;QACP,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,qWAoBT;QACD,MAAM,EAAE,CAAC,cAER,CAAC;KACL,CAAC;yDAOkC,gEAAU,oBAAV,gEAAU;GANjC,YAAY,CAwBxB;AAxBwB;;;;;;;;;;;;;;;;;;;;;;;AC9B+B;AACjB;AACI;AACF;AAEI;AACJ;AAczC,IAAa,SAAS;IAAtB;IACA,CAAC;IAAD,gBAAC;AAAD,CAAC;AADY,SAAS;IAZrB,sFAAQ,CAAC;QACN,YAAY,EAAE;YACV,oEAAY;SACf;QACD,OAAO,EAAE;YACL,gFAAa;YACb,mEAAW;YACX,iEAAU;SACb;QACD,SAAS,EAAE,CAAC,gEAAU,CAAC;QACvB,SAAS,EAAE,CAAC,oEAAY,CAAC;KAC5B,CAAC;GACW,SAAS,CACrB;AADqB;;;;;;;;;ACpBtB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEhF,mFALmF;AAK5E,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC","file":"main.bundle.js","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Headers, Http} from \"@angular/http\";\n\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class ApiService {\n\n    constructor(private http: Http) {\n    }\n\n    get() {\n        const headers = new Headers();\n        const ep = '/api/v1.0';\n        headers.append('Content-Type', 'application/json');\n\n        return this.http.get(ep, {headers: headers})\n            .map(res => res.json());\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/api.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 71;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 71\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import {Component, OnInit} from \"@angular/core\";\nimport {ApiService} from \"./api.service\";\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <h1>\n            {{title}}\n        </h1>\n        \n        <hr>\n\n        <div *ngIf=\"data\">\n            <h3>\n                <pre>{{data | json}}</pre>\n            </h3>\n        </div>\n\n        <div *ngIf=\"err\">\n            <h3>\n                <pre>{{err}}</pre>\n            </h3>\n        </div>\n        \n        <hr>\n    `,\n    styles: [`\n    \n    `]\n})\nexport class AppComponent implements OnInit {\n\n    title;\n    data;\n    err;\n\n    constructor(private apiService: ApiService) {\n\n    }\n\n    ngOnInit(): void {\n        this.title = 'App works!';\n\n        this.apiService.get().subscribe(\n            data => {\n                this.data = data;\n            },\n            err => {\n                this.err = err;\n            }\n        );\n    }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import {BrowserModule} from \"@angular/platform-browser\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {HttpModule} from \"@angular/http\";\n\nimport {AppComponent} from './app.component';\nimport {ApiService} from './api.service';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpModule\n    ],\n    providers: [ApiService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts"],"sourceRoot":""}